

背包问题的几个要点：
	1、清楚dp[j]或dp[i][j]的含义
	2、递推公式 dp[j] = max(dp[j], dp[j-weight[i]] + value[i]);
		dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i]] + value[i]);
	3、初始化
	对于一维数组 初始化dp可以全为0
	二维数组 		初始化dp，dp[0]赋值为0，非零数组可以任意赋值，一般也赋值为0
	4、遍历顺序
	 对于一维数组来说 遍历是先遍历物品在遍历背包 
	 对于二维数组    遍历无先后
	 01背包 遍历背包时要反向遍历
	 for(int i=0;i<物品数量;i++) 
		for(int j=bagweight; i>=weight[i];j--)
	完全背包 遍历时要正向遍历
	for(int i=0;i<物品数量;i++)
		 for(int j=weight[i]; j<=bagweight;j++)   

//01背包问题：状态转移方程
// dp[i][j]含义：0~i物品任取放入容量为j的背包中

//01背包中，每个物品存在放与不放的两个状态 ，
//当不放物品i时，此时可以选择i-1个物品放入背包，此时背包的容量任然为j
dp[i-1][j]; 


//当放入物品i时，此时还可以选择i-1个物品，背包容量为 j-weight[i]，总容量减去i物品的重量，
//由于选择了物品i，则还要加上i物品的价值
dp[i-1][j-weight[i]] + value[i]
 
dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i]] + value[i]);

//一维数组，滚动数组
dp[j] = max(dp[j], dp[j-weight[i]] + value[i]);
//此时遍历
for(int i=0;i<物品的数量;i++) 
	for(int j=bagweight; j>weight[i];j--) //如果j正向遍历，则每次遍历背包最大价值会加上前一个物品，那么物品会被遍历两次，
	/// dp[1] = dp[1-1] + value[1] = 15
	//  dp[2] = dp[2-1] + value[1] = 15 + 15=30, 此时是将重量为1的物品装了两次， 由于是01背包，每个物品只能装一次
	//初始化： dp全部赋值为0 
		 
